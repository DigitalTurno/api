type User {
    id: ID!
    username: String!
    password: String!
    email: String!
    role: Role!
    status: Status!
    createdAt: Time!
    updatedAt: Time!
}

enum Role {
    ### SUPERUSER has all the permissions of the system ###
    SUPERUSER
    ## ADMIN has all the permissions of the system except for the SUPERUSER ##
    ADMIN
    ## ADVISER has the permissions to manage the users ##
    ADVISER
    ## GUEST has the permissions to read the data ##
    GUEST
}

input UserInput {
    username: String!
    password: String!
    email: String!
}

type QueryUser {
    users: [User] @goField(forceResolver: true) @hasRole(roles: [ADMIN, GUEST])
    getUserById(id: ID!): User! @goField(forceResolver: true)
}

type MutationUser {
   createUser(input: UserInput): User! @goField(forceResolver: true)
   updateUser(id: ID!, input: UserInput): User! @goField(forceResolver: true)
   deleteUser(id: ID!): User! @goField(forceResolver: true)
}