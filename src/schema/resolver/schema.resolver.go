package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"apiturnos/src/generated"
	"apiturnos/src/schema/model"
	"apiturnos/src/utils"
	"context"
)

// User is the resolver for the user field.
func (r *mutationResolver) User(ctx context.Context) (*model.MutationUser, error) {
	return &model.MutationUser{}, nil
}

// Auth is the resolver for the auth field.
func (r *mutationResolver) Auth(ctx context.Context) (*model.MutationAuth, error) {
	return &model.MutationAuth{}, nil
}

// Profile is the resolver for the profile field.
func (r *mutationResolver) Profile(ctx context.Context) (*model.MutationProfile, error) {
	return &model.MutationProfile{}, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context) (*model.QueryUser, error) {
	return &model.QueryUser{}, nil
}

// Profile is the resolver for the profile field.
func (r *queryResolver) Profile(ctx context.Context) (*model.QueryProfile, error) {
	return &model.QueryProfile{}, nil
}

// Auth is the resolver for the auth field.
func (r *queryResolver) Auth(ctx context.Context) (*model.QueryAuth, error) {
	return &model.QueryAuth{}, nil
}

// OnCreateUser is the resolver for the onCreateUser field.
func (r *subscriptionResolver) OnCreateUser(ctx context.Context) (<-chan *model.User, error) {
	// Crear un canal para los suscriptores
	userChannel := make(chan *model.User)

	// ID único para cada suscripción
	id := utils.RandString(8)

	go func() {
		// Cuando el contexto se cancele, eliminar el observador y cerrar el canal
		<-ctx.Done()
		r.mu.Lock()
		delete(r.subsUser.UserObserver, id)
		r.mu.Unlock()
		close(userChannel)
	}()

	// Guardar el observador en el mapa de observadores
	r.mu.Lock()
	r.subsUser.UserObserver[id] = userChannel
	r.mu.Unlock()

	return userChannel, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// Subscription returns generated.SubscriptionResolver implementation.
func (r *Resolver) Subscription() generated.SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
